openapi: 3.0.0
info:
  title: User API-Rest
  description: A simple college project that uses Golang to create an API-REST, utilizing Docker to containerize the application, and MySQL as the database. we will develop a basic user management system, allowing users to perform CRUD operations through the REST API
  version: 1.0.0

servers:
  - url: http://localhost:80/

tags:
  - name: user
    description: User sub-route where an authenticated user can use the differrent operations supported by the API

paths:
  /users:
    get:
      tags:
        - user
      summary: Get all users
      responses:
        
    post:
      tags:
        - user
      summary: Create user
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyUserPost'
        required: true
      responses:
        200:
          description: (OK) User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyUserPost'
        400:
          description: Error StatusBadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unsuccess'          

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by Id
      parameters:
        - $ref: '#/components/parameters/id'
    put:
      tags:
        - user
      summary: Update user  
      parameters:
        - $ref: '#/components/parameters/id'  
    delete:
      tags:
        - user
      summary: Delete user
      parameters:
        - $ref: '#/components/parameters/id'

components:
  parameters:
    id:
      name: id
      in: header
      description: User unique id
      required: true
      schema:
        type: string
  schemas:
    BodyUserPost: 
      type: object
      properties:
        username:
          type: string
          description: Username
        password:
          type: string
          description: User's password
        email:
          type: string
          description: User's email

    SuccessUserPost:
      type: string
    
    Unsuccess:
      type: object
      properties:
        message:
          type: string
          description: Error message